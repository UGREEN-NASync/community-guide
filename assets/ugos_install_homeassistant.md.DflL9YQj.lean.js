import{_ as t,c as o,a0 as s,o as a}from"./chunks/framework._ZXJvR_t.js";const i="/community-guide/assets/deploy_now.Dt5kgj4X.png",n="/community-guide/assets/access_console.BmKy7l2P.png",r="/community-guide/assets/create_account.D4kE_XQS.png",c="/community-guide/assets/set_location.CWlAJ8K-.png",l="/community-guide/assets/choose_analytics.Bm96GTAV.png",h="/community-guide/assets/found_compatible_devices.CSLJ7_c8.png",m="/community-guide/assets/change_language.BQurSP4S.png",d="/community-guide/assets/create_folders.BxT1hhUS.png",p="/community-guide/assets/github_download.G_PbC37A.png",u="/community-guide/assets/extracted_hacs.u6wy3oJX.png",g="/community-guide/assets/restart_ha.DbFhWoxL.png",y="/community-guide/assets/add_hacs_integration.BtOkwa6H.png",f="/community-guide/assets/hacs_submit.BwSo1_Qq.png",k="/community-guide/assets/github_link_hacs.DbVUcoWw.png",_="/community-guide/assets/continue_github.DosP2Gx_.png",b="/community-guide/assets/authorize_hac_github.ChqZvmw_.png",w="/community-guide/assets/hacs_install_complete.B9BPL9wc.png",x=JSON.parse('{"title":"How to Build the Home Assistant Smart Home System with Docker","description":"","frontmatter":{},"headers":[],"relativePath":"ugos/install/homeassistant.md","filePath":"ugos/install/homeassistant.md"}'),A={name:"ugos/install/homeassistant.md"};function C(H,e,E,S,v,q){return a(),o("div",null,e[0]||(e[0]=[s(`<h1 id="how-to-build-the-home-assistant-smart-home-system-with-docker" tabindex="-1">How to Build the Home Assistant Smart Home System with Docker <a class="header-anchor" href="#how-to-build-the-home-assistant-smart-home-system-with-docker" aria-label="Permalink to &quot;How to Build the Home Assistant Smart Home System with Docker&quot;">​</a></h1><p>Home Assistant (HA) is an open-source smart home system built on Python, offering integration with various devices and highly customizable configurations. With Home Assistant, you can easily connect smart devices from different brands (such as cameras, fans, air conditioners) and leverage automation, group management, and UI customization features to create a personalized smart space. Additionally, HA supports Siri control, allowing users to manage home devices effortlessly through voice commands. As open-source software, Home Assistant is available for free and is compatible with thousands of devices and services, enabling you to build a unified, intelligently connected home management system.</p><h2 id="deploy-container-using-docker-compose" tabindex="-1">Deploy Container Using Docker Compose <a class="header-anchor" href="#deploy-container-using-docker-compose" aria-label="Permalink to &quot;Deploy Container Using Docker Compose&quot;">​</a></h2><p>To quickly deploy Home Assistant on UGREEN NAS, it is recommended to use Docker Compose for project management. This method is suitable when you need to create and manage multiple containers, making containerized management convenient. The following detailed steps will guide you how to deploy Home Assistant using Docker Compose. <a href="https://support.ugnas.com/knowledgecenter/#/detail/eyJpZCI6MzMyLCJ0eXBlIjoidGFnMDAxIiwicGF0aENvZGUiOiJwcm8wMDIsOWpvcDV3LGUyZVNueiIsImxhbmd1YWdlIjoiZW4tVVMiLCJjbGllbnRUeXBlIjoiUEMiLCJhcnRpY2xlVmVyc2lvbiI6IiJ9" target="_blank" rel="noreferrer">How to Use Docker Compose on UGREEN UGOS Pro?</a></p><h3 id="_1-access-the-docker-project-interface" tabindex="-1">1. Access the Docker Project Interface <a class="header-anchor" href="#_1-access-the-docker-project-interface" aria-label="Permalink to &quot;1. Access the Docker Project Interface&quot;">​</a></h3><p>In the UGOS Pro system of UGREEN NAS, open the &quot;Docker&quot; app, click &quot;Project &gt; Create&quot; to start the project creation wizard.</p><h3 id="_2-configure-the-docker-compose-file" tabindex="-1">2. Configure the Docker Compose File <a class="header-anchor" href="#_2-configure-the-docker-compose-file" aria-label="Permalink to &quot;2. Configure the Docker Compose File&quot;">​</a></h3><p>In the wizard, you&#39;ll need to provide a Docker Compose configuration file. Below is the example configuration file for Home Assistant:</p><div class="language-docker vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">docker</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">services:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    homeassistant:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        container_name: homeassistant  # Container name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        image: homeassistant/home-assistant:latest  # Container image version</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        restart: always                # Container restart policy</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        network_mode: host             # Container network mode</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        volumes:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            - ./homeassistant:/config  # Mount directory for configuration files storage</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        environment:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            - TZ=Asia/Shanghai         # Timezone setting</span></span></code></pre></div><details class="details custom-block"><summary>Details</summary><ul><li>Use the directive to enable shared storage between the NAS main unit and the container. <code>./homeassistant:/config</code> represents the directory where the Docker Compose file is located, and the homeassistant folder in this directory will be mapped to the directory in the container. All configuration files and databases for Home Assistant will be stored in this directory.</li><li>Assign the name homeassistant to the Docker container to facilitate direct management by container name.</li><li>Specify the Home Assistant Docker image to use. The <code>latest</code> tag ensures that the most recent version is pulled.</li><li>Set the container’s restart policy to always. This ensures the container restarts automatically, regardless of whether it stopped normally or unexpectedly.</li><li>Configure the container&#39;s network mode as host, allowing the container to use the NAS host’s network interface directly, simplifying communication with external smart devices.</li><li>Use the environment variable to set the container&#39;s time zone. This is essential for maintaining consistent timestamps for automated tasks and logs. You can adjust the time zone to match your location (e.g., <code>America/Chicago</code> or <code>Europe/Berlin</code>).</li></ul></details><h3 id="_3-deploy-the-project" tabindex="-1">3. Deploy the Project <a class="header-anchor" href="#_3-deploy-the-project" aria-label="Permalink to &quot;3. Deploy the Project&quot;">​</a></h3><p>After confirming that the configuration file is correct, click &quot;Deploy Now&quot;. The system will automatically pull the image and start the container. Once the deployment is complete, you can access the Home Assistant console by visiting <code>your-nas-name.local:8123</code> in your browser.</p><p><img src="`+i+'" alt="Deployment log after clicking deploy now"></p><h2 id="access-the-home-assistant-console" tabindex="-1">Access the Home Assistant Console <a class="header-anchor" href="#access-the-home-assistant-console" aria-label="Permalink to &quot;Access the Home Assistant Console&quot;">​</a></h2><p>After the deployment is complete, open the browser and enter the NAS IP address or name and port (e.g., <code>192.168.0.65:8123</code> or <code>your-nas-name.local:8123</code>) to access the console. Click “Create My Smart Home” and follow the setup wizard to complete the configuration.</p><p><img src="'+n+'" alt="Home Assistant Welcome screen"></p><p>Follow the prompts to enter your name, username, and password to create your Home Assistant account.</p><p><img src="'+r+'" alt="Home Assistant account creation"></p><p>You can set your home’s location based on your actual needs, or click “Skip” to proceed.</p><p><img src="'+c+'" alt="Home Assistant location set"></p><p>Choose whether to send analytics or not, and which ones, then click &quot;Next&quot; to continue. If you don&#39;t want to send any analytics, you can disable every option and click &quot;Next&quot; to continue.</p><p><img src="'+l+'" alt="Home Assistant analytics list"></p><p>Click &quot;Finish&quot; to access the Home Assistant home page. You can add devices, configure automation rules, and customize the dashboard here.</p><p><img src="'+h+'" alt="Home Assistant compatible devices found"></p><p>If you need to change the language, you can adjust the system language to one you are familiar with in &quot;User Settings&quot;.</p><p><img src="'+m+'" alt="Home Assistant change language setting"></p><h2 id="install-the-hacs-plugin-store" tabindex="-1">Install the HACS Plugin Store <a class="header-anchor" href="#install-the-hacs-plugin-store" aria-label="Permalink to &quot;Install the HACS Plugin Store&quot;">​</a></h2><p>HACS (Home Assistant Community Store) is a community-driven plugin store of Home Assistant, allowing users to install various integrations and plugins. Follow these steps to install HACS:</p><ol><li>Open the file manager, create <code>www</code> and <code>custom_components</code> folders under the <code>Shared Folder/docker/homeassistant</code> directory. If the fo. Note: is the plugin directory.</li></ol><p><img src="'+d+'" alt="UGOS hacs folder creation"></p><ol start="2"><li>Go to GitHub to download the latest version of the HACS archive. If you don&#39;t have a GitHub account, you can register one first and then proceed with the download. <a href="https://github.com/hacs/integration/releases" target="_blank" rel="noreferrer">https://github.com/hacs/integration/releases</a></li></ol><p><img src="'+p+'" alt="HACS github download"></p><ol start="3"><li>After downloading, extract the hacs.zip archive and upload the extracted files to the <code>Shared Folder/docker/homeassistant/custom_components</code> directory. All the files should be in the <code>hacs</code> directory.</li></ol><p><img src="'+u+'" alt="HACS extracted content"></p><ol start="4"><li>Restart the Home Assistant container through the Docker application or by using the Developer Tools on the Home Assistant page.</li></ol><p><img src="'+g+'" alt="Restart Home Assistant"></p><ol start="5"><li>After the restart, go to the Home Assistant page, click Settings &gt; Devices &amp; Services, select Add Integration, search for and add HACS.</li></ol><p><img src="'+y+'" alt="Add HACS integration"></p><ol start="6"><li>Check all the options and click &quot;Submit&quot;.</li></ol><p><img src="'+f+'" alt="HACS submit"></p><ol start="7"><li>Copy the code, then click the GitHub link on the page to proceed with account binding. If you don&#39;t have a GitHub account, you can register one yourself and follow the prompts to complete the account binding process.</li></ol><p><img src="'+k+'" alt="Click Github link and enter code"></p><ol start="8"><li>After entering the code, click &quot;Continue&quot;.</li></ol><p><img src="'+_+'" alt="Click Github continue"></p><ol start="9"><li>Click &quot;Authorize hacs&quot;. The screen will indicate that the authorization was successful.</li></ol><p><img src="'+b+'" alt="Authorize HACS"></p><ol start="10"><li>After completing the binding, you will see the HACS option in the sidebar of Home Assistant.</li></ol><p><img src="'+w+'" alt="HACS in the sidebar"></p><p>Congrats ! You installed Home Assistant ! 🎉</p><div class="info custom-block"><p class="custom-block-title">Credit</p><p>This guide was created by the Ugreen NASync team and modified by <a href="https://github.com/topiga/" target="_blank" rel="noreferrer">Topiga</a></p></div>',50)]))}const P=t(A,[["render",C]]);export{x as __pageData,P as default};
